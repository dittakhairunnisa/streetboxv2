{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/appsetting/get-by-key/:key": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "AppSetting"
                ],
                "summary": "Get App Setting Value (permission = all)",
                "operationId": "GetByKey",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"nearby_radius\"",
                        "description": " ",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.AppSetting",
                        "schema": {
                            "$ref": "#/definitions/model.AppSetting"
                        }
                    }
                }
            }
        },
        "/appsetting/update-by-key/:key": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "AppSetting"
                ],
                "summary": "Update App Setting Value (permission = superadmin)",
                "operationId": "UpdateByKey",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"nearby_radius\"",
                        "description": " ",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "description": "Update AppSetting",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUpdateAppSettingByKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.AppSetting",
                        "schema": {
                            "$ref": "#/definitions/model.AppSetting"
                        }
                    }
                }
            }
        },
        "/canvassing": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Get Admin's Canvassing Rule (permission = admin)",
                "operationId": "GetCanvas",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Canvassing"
                        }
                    },
                    "500": {
                        "description": "Inquiry Canvassing Rule Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Update Foodtruck's Canvassing Rule (permission = admin)",
                "operationId": "UpdateCanvass",
                "parameters": [
                    {
                        "description": "merchant_id and last_auto_blast fields are not mandatory",
                        "name": "canvassing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Canvassing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Canvassing"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Update Canvassing Rule Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Create Canvassing Rule (permission = admin)",
                "operationId": "CreateCanvass",
                "parameters": [
                    {
                        "description": "merchant_id and last_auto_blast fields are not mandatory",
                        "name": "canvassing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Canvassing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Canvassing"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Create Canvassing Rule Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/blast": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Blast Notification to Users Nearby Manually (permission = merchant)",
                "operationId": "Blast",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "No users nearby",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Blast Canvassing Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/call-status/:call-id/:status": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Update Status Call From Consumer (permission = merchant)",
                "operationId": "UpdateStatusCall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "1",
                        "name": "call-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "onprocess/accept/reject/expire",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.CanvassingCall"
                        }
                    },
                    "500": {
                        "description": "Call Status Updated Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/call/:call-id/:status": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Answer Call From Consumer (permission = merchant)",
                "operationId": "AnswerCall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "1",
                        "name": "call-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "onprocess/accept/reject/expire",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.CanvassingCall"
                        }
                    },
                    "500": {
                        "description": "Answer Consumer Call Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/call/:notif-id": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Call Foodtruck (permission = consumer)",
                "operationId": "CallFoodtruck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "1",
                        "name": "notif-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Calling Foodtruck Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/calls": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Inquiry Customer's Calls (permission = consumer)",
                "operationId": "GetCallsByCustomerID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "accept/request/history",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RespCallsByUserID"
                            }
                        }
                    },
                    "500": {
                        "description": "Inquiry Calls Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/finish/:call-id": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Finish Call From Consumer (permission = merchant)",
                "operationId": "FinishCall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "1",
                        "name": "call-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Finish Consumer Call Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/foodtruck": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Get Foodtruck's Canvassing Rule (permission = merchant)",
                "operationId": "GetFoodtruckCanvas",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/model.RespCanvassing"
                        }
                    },
                    "500": {
                        "description": "Inquiry Canvassing Rule Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/foodtruck/calls": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Inquiry Foodtruck's Calls (permission = merchant)",
                "operationId": "GetCallsByFoodtruckID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "onprocess/accept/request/history",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RespCallsByFoodtruckID"
                            }
                        }
                    },
                    "500": {
                        "description": "Inquiry Calls Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/foodtruck/location": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Update Foodtruck's Location (permission = merchant)",
                "operationId": "UpdateFoodtruckLocation",
                "parameters": [
                    {
                        "description": "id fields are not mandatory",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.FoodtruckLocation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Update Foodtruck Location Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/foodtruck/location/:id": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Get Foodtruck's Location (permission = all)",
                "operationId": "GetFoodtruckLocation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "1",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.FoodtruckLocation"
                        }
                    },
                    "500": {
                        "description": "Inquiry Foodtruck Location Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/notifications": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Inquiry Users' Notifications (permission = consumer)",
                "operationId": "GetNotifications",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RespNotifByUserID"
                            }
                        }
                    },
                    "500": {
                        "description": "Inquiry Notifications Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/toggle/auto": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Toggle Foodtruck Auto Blast (permission = merchant)",
                "operationId": "ToggleAutoBlast",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/canvassing/users/location": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Update Users's Location (permission = consumer)",
                "operationId": "UpdateUsersLocation",
                "parameters": [
                    {
                        "description": "id fields are not mandatory",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UsersLocation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Update Users Location Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/canvassing/users/location/": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Canvassing"
                ],
                "summary": "Get User's Location (permission = consumer)",
                "operationId": "GetUserLocation",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.UsersLocation"
                        }
                    },
                    "500": {
                        "description": "Inquiry User's Location Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/check": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Check Token Forget Password",
                "operationId": "CheckToken",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token reset",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ]
            }
        },
        "/consumer/home/map/livetracking/{lat}/{lon}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Live Tracking Foodtruck Nearby on Maps  (permission = consumer)",
                "operationId": "LiveTracking",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "lon",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "10",
                        "description": "KM",
                        "name": "distance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResLiveTracking",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResLiveTracking"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/home/map/parking-space/{lat}/{lon}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Show Parking Space Nearby on Maps  (permission = consumer)",
                "operationId": "MapParkingSpace",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Latitude Consumer",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude Consumer",
                        "name": "lon",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "10",
                        "description": "KM",
                        "name": "distance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResParkingSpace",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResParkingSpace"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/home/map/schedules/{id}/parking-space": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Show Schedule Parking Space Nearby on Maps  (permission = consumer)",
                "operationId": "MapParkingSpaceDetail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResParkingSpaceDetail",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResParkingSpaceDetail"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/home/nearby/{lat}/{lon}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Landing Page End User Nearby (permission = consumer)",
                "operationId": "Nearby",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "lon",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "999999",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "10",
                        "description": "KM",
                        "name": "distance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.Pagination"
                        }
                    }
                }
            }
        },
        "/consumer/home/schedules-regular/{typesId}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Show Schedules Regular Merchants  (permission = consumer)",
                "operationId": "MerchantSchedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tasks Regular ID",
                        "name": "typesId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.Schedules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Schedules"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/home/visit-sales": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Show HomeVisit Sales  (permission = consumer)",
                "operationId": "VisitSales",
                "parameters": [
                    {
                        "type": "string",
                        "default": "999999",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResVisitSales",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResVisitSales"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/home/visit-sales/detail/{merchantId}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Show HomeVisit Sales Available  (permission = consumer)",
                "operationId": "VisitSalesDetail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "merchant id",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResVisitSalesDetail",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResVisitSalesDetail"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/merchant/menu/{merchantId}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Get Merchant Menu (permission = consumer)",
                "operationId": "GetMerchantMenu",
                "parameters": [
                    {
                        "type": "string",
                        "default": "all",
                        "description": "all, nearby, visit",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Merchant ID",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []entity.MerchantMenu",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.MerchantMenu"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/merchant/tax/{merchantId}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Get Merchant Tax (permission = consumer)",
                "operationId": "GetMerchantTax",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant ID",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.MerchantTax",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantTax"
                        }
                    }
                }
            }
        },
        "/consumer/order/history": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Order History (permission = consumer)",
                "operationId": "OrderHistory",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "all",
                        "description": " ",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.Pagination"
                        }
                    }
                }
            }
        },
        "/consumer/payment-method": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Get Payment Method (permission = consumer)",
                "operationId": "GetPaymentMethod",
                "responses": {
                    "200": {
                        "description": "data: []model.ResPaymentMethod",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResPaymentMethod"
                            }
                        }
                    }
                }
            }
        },
        "/consumer/registration-token/{token}": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Send Registration Token FCM, Its should be done to archive push notification (permission = merchant)",
                "operationId": "RegistrationTokenEndUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fcm token from client SDK",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResTrxOrderList",
                        "schema": {
                            "$ref": "#/definitions/model.ResTrxOrderList"
                        }
                    }
                }
            }
        },
        "/consumer/update/userprofile": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "End User"
                ],
                "summary": "Update End User Profile (permission = consumer)",
                "operationId": "UpdateEndUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "End User Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End User Address",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End User Phone",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End User Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Profile Picture",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"User Successfully Updated\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Error When Update User Profile\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/forgotpassword": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Send Email Forgot Password",
                "operationId": "ForgotPassword",
                "parameters": [
                    {
                        "description": "username",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqResetPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Send Email Forgot Password Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Username not found\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/homevisit": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Get All Home Visit Pagination (permission = admin)",
                "operationId": "GetAllHV",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Update Home Visit (permission = admin)",
                "operationId": "UpdateHomeVisit",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "homeVisit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUpdateHomevisitSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []entity.HomevisitSales",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.HomevisitSales"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Create New Home Visit (permission = admin)",
                "operationId": "CreateHV",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "homeVisit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateHomevisitSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []entity.HomevisitSales",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.HomevisitSales"
                            }
                        }
                    }
                }
            }
        },
        "/homevisit/batch": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Batch Create New Home Visit (permission = admin)",
                "operationId": "BatchCreateHV",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "batchHomeVisit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqBatchCreateHomevisitSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []entity.HomevisitSales",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.HomevisitSales"
                            }
                        }
                    }
                }
            }
        },
        "/homevisit/deletebydate/{date}": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Delete Home Visit (permission = admin)",
                "operationId": "DeleteHomeVisit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "yyyy-mm-dd",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"successfully deleted home visit!\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "message: \"Failed to Delete Menu",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/homevisit/deletebyid/{id}": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Delete Home Visit By ID (permission = admin)",
                "operationId": "DeleteHomeVisitByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "number",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"successfully deleted home visit!\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "message: \"Failed to Delete Menu",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/homevisit/info/{date}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Home Visit"
                ],
                "summary": "Get Info Home Visit (permission = admin)",
                "operationId": "GetInfoHV",
                "parameters": [
                    {
                        "type": "string",
                        "description": "yyyy-mm-dd",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResHomeVisitGetInfo",
                        "schema": {
                            "$ref": "#/definitions/model.ResHomeVisitGetInfo"
                        }
                    }
                }
            }
        },
        "/log": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Log Activity"
                ],
                "summary": "Get All Log Activity Pagination (permission = superadmin)",
                "operationId": "GetAllLog",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/log-merchant": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Log Merchant"
                ],
                "summary": "Get All Log Merchant Pagination (permission = admin)",
                "operationId": "GetAllLogMerchant",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Login user",
                "operationId": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "default": "streetbox-mobile-merchant",
                        "description": " ",
                        "name": "CLIENT_ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "all fields mandatory",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token: \"exampletokenresponse\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "401": {
                        "description": "code: 401, message: \"username or password not valid, please try again\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/login/google": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Login End User Using Google",
                "operationId": "LoginGoogle",
                "parameters": [
                    {
                        "description": "Google",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUserLoginGoogle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"exampletokenresponse\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "401": {
                        "description": "code: 401, message: \"username or password not valid, please try again\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Update Merchant (permission = merchant)",
                "operationId": "UpdateMerchant",
                "parameters": [
                    {
                        "description": "Update Merchant",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUpdateMerchant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Merchant"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Create Merchant (permission = admin)",
                "operationId": "CreateMerchant",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "merchant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateMerchant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Merchant"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/:id/category": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant Category"
                ],
                "summary": "Delete Merchant Category (permission = superadmin)",
                "operationId": "DeleteMerchantCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "category's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Delete category failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get All Merchant (permission = superadmin)",
                "operationId": "GetAllMerchant",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Merchant"
                            }
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/category": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant Category"
                ],
                "summary": "Get All Merchant Category (permission = superadmin)",
                "operationId": "GetAllMerchantCategory",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.MerchantCategory"
                            }
                        }
                    },
                    "500": {
                        "description": "Inquiry categories failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant Category"
                ],
                "summary": "Update Merchant Category (permission = superadmin)",
                "operationId": "UpdateMerchantCategory",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "merchantcategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantCategory"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Update category failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant Category"
                ],
                "summary": "Create Merchant Category (permission = superadmin)",
                "operationId": "CreateMerchantCategory",
                "parameters": [
                    {
                        "description": "category field mandatory",
                        "name": "merchantcategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantCategory"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Create category failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/count/foodtruck": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Count Foodtruck (permission = admin)",
                "operationId": "CountFoodtruck",
                "responses": {
                    "200": {
                        "description": "data: model.ResCountFoodtruck",
                        "schema": {
                            "$ref": "#/definitions/model.ResCountFoodtruck"
                        }
                    }
                }
            }
        },
        "/merchant/csv/uploadmenu": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Upload CSV (permission = admin)",
                "operationId": "ImportCSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "csv file",
                        "name": "csv",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image zip",
                        "name": "imageZip",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.MerchantMenu"
                            }
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upoad image error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/delete-image-menu/{id}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Delete Image Menu(permission = admin)",
                "operationId": "DeleteImageMenu",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant Menu ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Delete Image Merchant Menu Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Delete Image Menu error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Delete Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/foodtruck": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Create Foodtruck (permission = admin)",
                "operationId": "CreateFoodtruck",
                "parameters": [
                    {
                        "description": "username mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateFoodtruck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/foodtruck/all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get All Foodtruck (permission = admin)",
                "operationId": "GetAllFoodtruck",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResGetFoodtruckTasks"
                            }
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/foodtruck/{id}/resetpassword": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Reset Password Footruck by Admin (permission = admin)",
                "operationId": "ResetPasswordFoodTruck",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "foodtruckID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reset Password Foodtruck",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqChangePassword"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Reset Food Truck Password Success!\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Client Errors\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Server Errors\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/foodtruck/{id}/update": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Update Foodtruck Info by Admin (permission = admin)",
                "operationId": "UpdateFoodtruck",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "foodtruckID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Foodtruck",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Users",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/info": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Info Merchant (permission = merchant)",
                "operationId": "GetInfoMerchant",
                "responses": {
                    "200": {
                        "description": "data: model.Merchant",
                        "schema": {
                            "$ref": "#/definitions/model.Merchant"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/info/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Merchant by ID (permission = superadmin)",
                "operationId": "GetByIDMerchant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "merchantID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Merchant"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/info/{id}/foodtruck": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Foodtruck by ID (permission = admin)",
                "operationId": "GetFoodtruckByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "foodtruckID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Users",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    }
                }
            }
        },
        "/merchant/list/menu": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Merchant List Menu (permission = merchant)",
                "operationId": "ListMenu",
                "parameters": [
                    {
                        "type": "string",
                        "default": "all",
                        "description": "all, nearby, visit",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.MerchantMenu"
                            }
                        }
                    }
                }
            }
        },
        "/merchant/menu": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Create Menu (permission = admin)",
                "operationId": "CreateMenu",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateMerchantMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantMenu"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/menu/all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "List Paginate Menu (permission = admin)",
                "operationId": "ListPaginateMenu",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc/ id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/merchant/menu/info/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Menu By ID (permission = merchant)",
                "operationId": "GetMenuByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant Menu ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantMenu"
                        }
                    }
                }
            }
        },
        "/merchant/menu/{id}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Update Merchant Menu (permission = merchant)",
                "operationId": "UpdateMenu",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant Menu ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUpdateMerchantMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantMenu"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/pos/gettransaction": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Order POS Transaction",
                "operationId": "GetOrderTransaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "date DD/MM/YYYY",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date DD/MM/YYYY",
                        "name": "endDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "keyword like trx number and order number",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResTrxOrderList",
                        "schema": {
                            "$ref": "#/definitions/model.ResTrxOrderList"
                        }
                    }
                }
            }
        },
        "/merchant/registration-token/{token}": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Send Registration Token FCM, Its should be done to archive push notification (permission = merchant)",
                "operationId": "RegistrationToken",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fcm token from client SDK",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: Registration Token Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/merchant/remove-banner/{filename}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Remove Banner (permission = admin)",
                "operationId": "RemoveBanner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "banner filename",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: Banner Removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/merchant/remove-logo/{filename}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Remove Logo (permission = admin)",
                "operationId": "RemoveLogo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "logo filename",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: Logo Removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/merchant/tax/menu": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Set Merchant Tax (permission = admin)",
                "operationId": "MerchantTax",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MerchantTax"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.MerchantTax",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantTax"
                        }
                    }
                }
            }
        },
        "/merchant/taxsetting/menu": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Get Merchant Tax Setting (permission = merchant)",
                "operationId": "GetTaxSetting",
                "responses": {
                    "200": {
                        "description": "data: entity.MerchantTax",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantTax"
                        }
                    }
                }
            }
        },
        "/merchant/upload-banner": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Upload Banner (permission = admin)",
                "operationId": "UploadBanner",
                "parameters": [
                    {
                        "type": "file",
                        "description": "image banner",
                        "name": "banner",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Upload Banner Merchant Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upoad image error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/upload-logo": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Upload Logo (permission = admin)",
                "operationId": "UploadLogo",
                "parameters": [
                    {
                        "type": "file",
                        "description": "image logo",
                        "name": "logo",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Upload Logo Merchant Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upoad image error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/upload-menu/{id}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Upload Image Menu (permission = admin)",
                "operationId": "UploadMenu",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant Menu ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image menu",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Upload Menu Merchant Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upload Image Menu error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/xendit-generate-subaccount": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Xendit Generate Sub-Account Merchant (permission = admin)",
                "operationId": "XenditGenerateSubAccount",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "merchant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqXenditGenerateSubAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.Merchant"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/{id}": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Delete Merchant by ID (permission = superadmin)",
                "operationId": "DeleteByIDMerchant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MerchantID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"message\": \"Success\" }",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/{id}/foodtruck": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Delete Foodtruck by ID (permission = admin)",
                "operationId": "DeleteFoodtruckByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FoodtruckID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"message\": \"Success\" }",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/merchant/{id}/menu/delete": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "Delete Merchant Menu (permission = merchant)",
                "operationId": "DeleteMenu",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Merchant Menu ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Menu Successfully Deleted\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "message: \"Failed to Delete Menu",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get All Parking Space Pagination (permission = admin)",
                "operationId": "GetAllPSpace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Create Parking Space (permission = superadmin)",
                "operationId": "CreateParkingSpace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Parking Space Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Parking Space Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "lat",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "long",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Total Space",
                        "name": "totalSpace",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "desc",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Landlord info",
                        "name": "landlordInfo",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Rating",
                        "name": "rating",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start Contract yyyy-MM-dd",
                        "name": "startContract",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Contract yyyy-MM-dd",
                        "name": "endContract",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start Operation yyyy-MM-dd HH:mm:SS",
                        "name": "startTime",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Operation yyyy-MM-dd HH:mm:SS",
                        "name": "endTime",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "data: entity.ParkingSpace, message: \"Create Parking Space Success\" ",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpace"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Create Parking Space Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/list": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get All Parking Space (permission = superadmin)",
                "operationId": "GetAllList",
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/parkingspace/list/sales": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get All Parking Space Sales List no pagination (permission = superadmin)",
                "responses": {
                    "200": {
                        "description": "entity.ParkingSpaceSales",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/parkingspace/sales": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get All Parking Space Sales Pagination (permission = admin)",
                "operationId": "GetSales",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/parkingspace/sales/create": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Create Parking Space Sales (permission = superadmin)",
                "operationId": "CreateSales",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space ID",
                        "name": "parkingSpaceId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start Date yyyy-MM-dd",
                        "name": "startDate",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Date yyyy-MM-dd",
                        "name": "endDate",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Total Slot",
                        "name": "totalSlot",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Point",
                        "name": "point",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.ParkingSpaceSales, message: \"Create Sales Succeed\" ",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpaceSales"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Create Sales Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/sales/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get Parking Space Sales Pagination by ParkingSpaceID (permission = admin)",
                "operationId": "GetSalesByPSpaceID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ParkingSpaceID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/parkingspace/sales/{id}/info": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get Parking Space Sales by ID (permission = superadmin)",
                "operationId": "GetSalesByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.ParkingSpaceSales",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpaceSales"
                        }
                    }
                }
            }
        },
        "/parkingspace/search/sales/{key}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Search Parking Space Sales by Name or Address (permission = admin)",
                "operationId": "SearchSalesByName",
                "parameters": [
                    {
                        "type": "string",
                        "description": "keyword",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/parkingspace/show/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get Parking Space by ID (permission = superadmin)",
                "operationId": "GetByIDPspace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.ParkingSpace",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpace"
                        }
                    }
                }
            }
        },
        "/parkingspace/spacesalesdate/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get Parking Space by Sales Date (permission = superadmin)",
                "operationId": "GetSpaceBySalesDate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "yyyy-mm-dd hh:mm:ss",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "yyyy-mm-dd hh:mm:ss",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.ParkingSpace",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpace"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/delete": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Delete Parking Space by ID (permission = superadmin)",
                "operationId": "DeleteByIDPSpace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Delete Parking Space Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/doc/delete": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Delete Document Parking Space by Document Name (permission = superadmin)",
                "operationId": "DeleteDoc",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete Document",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqDeleteAsset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed to Delete Doc\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/doc/upload": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Upload Documents (permission = superadmin)",
                "operationId": "UploadDoc",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking_space_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "document parking space",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{ \"message\": \"Upload Document Parking Space Success\" }",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upoad file error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Document Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/image/delete": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Delete Image by Image Name (permission = superadmin)",
                "operationId": "DeleteImage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete Image",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqDeleteAsset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Delete Image Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/image/upload": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Upload Image (permission = superadmin)",
                "operationId": "UploadImage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking_space_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image parking space",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: \"Upload Image Parking Space Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "code: 400, message: \"Form/Upoad image error\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Image Meta data failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/sales/delete": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Get Parking Space by ID (permission = superadmin)",
                "operationId": "DeleteSalesByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking space",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed to Delete ParkingSpaceSales\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/sales/update": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Update Parking Space Sales (permission = superadmin)",
                "operationId": "UpdUpdateSalesate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space Sales",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Sales",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqSalesUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpaceSales"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Sales Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/parkingspace/{id}/update": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parking Space"
                ],
                "summary": "Update Parking Space except uploading files/images (permission = superadmin)",
                "operationId": "Update",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "parking_space_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "address",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": " ",
                        "name": "latitude",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": " ",
                        "name": "longitude",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "space",
                        "name": "total",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "latitude",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": " ",
                        "name": "rating",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "startContract",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "endContract",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "startTime",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "endTime",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.ParkingSpace",
                        "schema": {
                            "$ref": "#/definitions/entity.ParkingSpace"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update Parking Space Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/payment/create-qrcode": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Create QRIS Xendit Payment Method",
                "operationId": "CreateQRIS",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "merchant ID",
                        "name": "merchant_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "total amount transaction",
                        "name": "amount",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "ORDER",
                            "VISIT"
                        ],
                        "type": "string",
                        "description": "types transaction",
                        "name": "types",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Address Transaction",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResCreateQRIS",
                        "schema": {
                            "$ref": "#/definitions/model.ResCreateQRIS"
                        }
                    }
                }
            }
        },
        "/payment/qrcode/{trxId}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Get QRIS Xendit Payment Method by Transaction ID",
                "operationId": "GetQRByTrxID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "trxId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResCreateQRIS",
                        "schema": {
                            "$ref": "#/definitions/model.ResCreateQRIS"
                        }
                    }
                }
            }
        },
        "/payment/simulate-qrcode/{trxId}": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Simulate QRIS Xendit Payment Method (testmode only)",
                "operationId": "SimulateQR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "trxId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResSimulateQR",
                        "schema": {
                            "$ref": "#/definitions/model.ResSimulateQR"
                        }
                    }
                }
            }
        },
        "/payment/xendit/qris/callback": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Callback executed by Xendit for Status Payment QRIS (Production Only)",
                "operationId": "XenditCallback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token Callback for Verify",
                        "name": "x-callback-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Callback from Xendit",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqXndQRISCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResponseSuccess",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/resetpassword": {
            "put": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Reset password user (permission  = all)",
                "operationId": "ResetPassword",
                "parameters": [
                    {
                        "description": "change password user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Reset Password Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Reset Password Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/role": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master Role"
                ],
                "summary": "Get All Role (permission = superadmin)",
                "operationId": "GetAllRole",
                "responses": {
                    "200": {
                        "description": "data: []entity.Role ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Role"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master Role"
                ],
                "summary": "Create new Role (permission = superadmin)",
                "operationId": "CreateRole",
                "parameters": [
                    {
                        "description": "role",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqRoleCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Role, message: \"New Role has created\" ",
                        "schema": {
                            "$ref": "#/definitions/entity.Role"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Create Role Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/role/exclude": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master Role"
                ],
                "summary": "Get All Role Exclude Foodtruck (permission = superadmin)",
                "operationId": "GetAllExclude",
                "responses": {
                    "200": {
                        "description": "data: []entity.Role ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Role"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get All Tasks Uncompleted (permission = admin)",
                "operationId": "GetAllTasks",
                "responses": {
                    "200": {
                        "description": "data: []model.ResMyTasksReg",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResMyTasksReg"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/homevisit": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create New Task Home Visit FoodTruck (permission = merchant)",
                "operationId": "CreateTasksHomevisit",
                "parameters": [
                    {
                        "description": "all fields mandatory",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateTasksHomevisit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Tasks",
                        "schema": {
                            "$ref": "#/definitions/entity.Tasks"
                        }
                    }
                }
            }
        },
        "/tasks/homevisit/check-in": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks HomeVisit Log CheckIn (permission = merchant)",
                "operationId": "CreateHomeVisitCheckIn",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksVisitLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.TasksRegularLog",
                        "schema": {
                            "$ref": "#/definitions/entity.TasksRegularLog"
                        }
                    }
                }
            }
        },
        "/tasks/homevisit/check-out": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks HomeVisit Log CheckOut (permission = merchant)",
                "operationId": "CreateHomeVisitCheckOut",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksVisitLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.TasksRegularLog",
                        "schema": {
                            "$ref": "#/definitions/entity.TasksRegularLog"
                        }
                    }
                }
            }
        },
        "/tasks/nonregular": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create New Task NonRegular FoodTruck (permission = merchant)",
                "operationId": "CreateTasksNonRegular",
                "responses": {
                    "200": {
                        "description": "data: entity.Tasks",
                        "schema": {
                            "$ref": "#/definitions/entity.Tasks"
                        }
                    }
                }
            }
        },
        "/tasks/nonregular/check-in": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Non Regular Log CheckIn (permission = merchant)",
                "operationId": "CreateNonRegCheckIn",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksNonRegLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.Tasks",
                        "schema": {
                            "$ref": "#/definitions/entity.Tasks"
                        }
                    }
                }
            }
        },
        "/tasks/nonregular/check-out": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Non Regular Log CheckOut (permission = merchant)",
                "operationId": "CreateNonRegCheckOut",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksNonRegLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.TasksNonregularLog",
                        "schema": {
                            "$ref": "#/definitions/entity.TasksNonregularLog"
                        }
                    }
                }
            }
        },
        "/tasks/nonregular/list": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get Free Tasks List (permission = merchant)",
                "operationId": "MyTaskNonRegular",
                "responses": {
                    "200": {
                        "description": "data: model.ResMyTasksNonReg",
                        "schema": {
                            "$ref": "#/definitions/model.ResMyTasksNonReg"
                        }
                    }
                }
            }
        },
        "/tasks/nonregular/status": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get Free Tasks Status (permission = merchant)",
                "operationId": "NonRegStatus",
                "responses": {
                    "200": {
                        "description": "data: entity.Tasks",
                        "schema": {
                            "$ref": "#/definitions/entity.Tasks"
                        }
                    }
                }
            }
        },
        "/tasks/ongoing/{id}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Change Status Tasks to Ongoing (permission = merchant)",
                "operationId": "ChangeToOngoing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TasksID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: \"Success Update Tasks Status\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/tasks/regular": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create New Task Regular FoodTruck (permission = admin)",
                "operationId": "CreateTasksRegular",
                "parameters": [
                    {
                        "type": "integer",
                        "description": " ",
                        "name": "trxSalesId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": " ",
                        "name": "usersId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "scheduleDate",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Tasks",
                        "schema": {
                            "$ref": "#/definitions/entity.Tasks"
                        }
                    }
                }
            }
        },
        "/tasks/regular/check-in": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Regular Log CheckIn (permission = merchant)",
                "operationId": "CreateRegularCheckIn",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksRegLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.TasksRegularLog",
                        "schema": {
                            "$ref": "#/definitions/entity.TasksRegularLog"
                        }
                    }
                }
            }
        },
        "/tasks/regular/check-out": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Regular Log CheckOut (permission = merchant)",
                "operationId": "CreateRegularCheckOut",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTasksRegLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : entity.TasksRegularLog",
                        "schema": {
                            "$ref": "#/definitions/entity.TasksRegularLog"
                        }
                    }
                }
            }
        },
        "/tasks/regular/list": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get Tasks Regular/Homevisit List Foodtruck (permission = merchant)",
                "operationId": "MyTaskRegular",
                "responses": {
                    "200": {
                        "description": "data: model.ResMyTasksReg",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResMyTasksReg"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/shift-in": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Task Log Shift In (permission = merchant)",
                "operationId": "ShiftIn",
                "responses": {
                    "200": {
                        "description": "data: entity.MerchantUsersShift",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantUsersShift"
                        }
                    }
                }
            }
        },
        "/tasks/shift-in/status": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Check Status Shift-In (permission = merchant)",
                "operationId": "ShiftInStatus",
                "responses": {
                    "200": {
                        "description": "shiftIn : bool ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/tasks/shift-out": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Task Log Shift Out (permission = merchant)",
                "operationId": "ShiftOut",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantUsersShift"
                        }
                    },
                    "300": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "400": {
                        "description": "Client Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Server Errors",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/tasks/tracking": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Non Regular Log CheckOut (permission = merchant)",
                "operationId": "CreateTracking",
                "parameters": [
                    {
                        "description": "All Mandatory",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateTasksTracking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : model.ResTasksTracking",
                        "schema": {
                            "$ref": "#/definitions/model.ResTasksTracking"
                        }
                    }
                }
            }
        },
        "/tasks/tracking/{id}/foodtruck": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create Tasks Non Regular Log CheckOut (permission = merchant)",
                "operationId": "GetTracking",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TasksID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data : model.ResTasksTracking",
                        "schema": {
                            "$ref": "#/definitions/model.ResTasksTracking"
                        }
                    }
                }
            }
        },
        "/tasks/undo/{id}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Change Status Tasks from 2 to 1 (1=open,2=ongoing) (permission = merchant)",
                "operationId": "ChangeToOpen",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TasksID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: \"Success Update Tasks Status\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/trx/createsync": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create Sync Trx (permission = merchant)",
                "operationId": "CreateSyncTrx",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateSyncTrx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.TrxSync",
                        "schema": {
                            "$ref": "#/definitions/entity.TrxSync"
                        }
                    }
                }
            }
        },
        "/trx/homevisit": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create Homevisit Trx (permission = consumer)",
                "operationId": "CreateTrxVisit",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateVisitTrx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.TrxVisit",
                        "schema": {
                            "$ref": "#/definitions/entity.TrxVisit"
                        }
                    }
                }
            }
        },
        "/trx/info/{trxId}": {
            "get": {
                "security": [
                    {
                        "token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get Transaction Info (permission = consumer)",
                "operationId": "GetInfotrx",
                "parameters": [
                    {
                        "type": "string",
                        "description": "transaction ID",
                        "name": "trxId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResTrx",
                        "schema": {
                            "$ref": "#/definitions/model.ResTrx"
                        }
                    }
                }
            }
        },
        "/trx/online-order": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get Online Order Trx for POS (permission = merchant)",
                "operationId": "GetOnlineOrder",
                "responses": {
                    "200": {
                        "description": "data: model.ResTrxOrderList",
                        "schema": {
                            "$ref": "#/definitions/model.ResTrxOrderList"
                        }
                    }
                }
            }
        },
        "/trx/online-order/closed/{trxId}": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Closed Online Order Trx for POS (permission = merchant)",
                "operationId": "ClosedOnlineOrder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "trxId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResTrxOnlineClosed",
                        "schema": {
                            "$ref": "#/definitions/model.ResTrxOnlineClosed"
                        }
                    }
                }
            }
        },
        "/trx/order": {
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Create Online Order Trx (permission = consumer)",
                "operationId": "OnlineOrder",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqTrxOrderOnline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Trx",
                        "schema": {
                            "$ref": "#/definitions/entity.Trx"
                        }
                    }
                }
            }
        },
        "/trx/refund/space": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create Refund for Parking Space Sales(permission = superadmin)",
                "operationId": "CreateTrxSpaceRefund",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqRefundParkingSpaceSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Refund Space Transaction Success!",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/trx/refund/visit": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create Refund for Home Visit (permission = merchant)",
                "operationId": "CreateTrxRefundVisit",
                "parameters": [
                    {
                        "description": " ",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqRefundHomeVisit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Refund Space Transaction Success!",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/trx/report": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "TransactionReport (permission = merchant)",
                "operationId": "TrxReportSingle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "format 01 to 12",
                        "name": "month",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "2015-now",
                        "name": "year",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResHomeVisitBookingList",
                        "schema": {
                            "$ref": "#/definitions/model.ResHomeVisitBookingList"
                        }
                    }
                }
            }
        },
        "/trx/report-all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "TransactionReportAll (permission = merchant)",
                "operationId": "TrxReportSingleAll",
                "parameters": [
                    {
                        "type": "string",
                        "description": "format 01 to 12",
                        "name": "month",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "2015-now",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "id,desc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.Pagination"
                        }
                    }
                }
            }
        },
        "/trx/visit/booking/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "List Home Visit Booking By Date (permission = merchant)",
                "operationId": "TrxVisitBookingByDate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "0",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.ResHomeVisitBookingDetailTimeNew",
                        "schema": {
                            "$ref": "#/definitions/model.ResHomeVisitBookingDetailTimeNew"
                        }
                    }
                }
            }
        },
        "/trx/visit/bookingall": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "List Home Visit Booking List (permission = merchant)",
                "operationId": "TrxVisitBookingList",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: model.Pagination",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/trxsales": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Create Transaction Parking Space Sales (permission = superadmin)",
                "operationId": "CreateTrxSales",
                "parameters": [
                    {
                        "description": "New Transaction Sales",
                        "name": "trxSales",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqCreateTrxSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Create Transaction Sales Succeed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Create Transaction Sales Succeed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/trxsales/all": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Get All Transaction (permission = superadmin)",
                "operationId": "GetAllTrxSales",
                "responses": {
                    "200": {
                        "description": "data: []model.ResTrxList",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResTrxList"
                            }
                        }
                    }
                }
            }
        },
        "/trxsales/info/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Get Transaction by ID (permission = superadmin)",
                "operationId": "GetByIDTrxSales",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trx ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResTrxList",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResTrxList"
                            }
                        }
                    }
                }
            }
        },
        "/trxsales/list": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Get List Pagination Transaction (permission = superadmin)",
                "operationId": "GetList",
                "parameters": [
                    {
                        "type": "string",
                        "default": "10",
                        "description": " ",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": " ",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g.: id,desc / id,asc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    }
                }
            }
        },
        "/trxsales/myparking": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Get My Parking Space (permission = merchant)",
                "operationId": "GetMyParking",
                "responses": {
                    "200": {
                        "description": "data: []model.ResMyParking",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResMyParkingList"
                            }
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/trxsales/myparking/slot/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Transaction Sales"
                ],
                "summary": "Get Slot My Parking Space (permission = merchant)",
                "operationId": "GetSlotMyParking",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parking Space ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []model.ResSlotMyParking ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResSlotMyParking"
                            }
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get All user (permission = superadmin)",
                "operationId": "GetAllUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": " ",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: []entity.Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Users"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Create User Superadmin or Admin (permission = superadmin)",
                "operationId": "CreateUser",
                "parameters": [
                    {
                        "description": "new user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "data: entity.Users, message: \"Create User Success\" ",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Create User Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/:id/address": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Delete User Address (permission = consumer)",
                "operationId": "DeleteUserAddress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address' id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Delete user address failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/address": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get User' Addresses (permission = consumer)",
                "operationId": "GetAddressByUserID",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.UsersAddress"
                            }
                        }
                    },
                    "500": {
                        "description": "Inquiry User Address Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Update User Address (permission = consumer)",
                "operationId": "UpdateUserAddress",
                "parameters": [
                    {
                        "description": "all fields are not mandatory",
                        "name": "useraddress",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UsersAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "401": {
                        "description": "Invalid authorization",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Create User Address Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Create User Address (permission = consumer)",
                "operationId": "CreateAddress",
                "parameters": [
                    {
                        "description": "id and primary fields are not mandatory",
                        "name": "useraddress",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UsersAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.UsersAddress"
                        }
                    },
                    "422": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "Create User Address Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/address/:id/switch": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Switch Primary User Address (permission = consumer)",
                "operationId": "SwitchUserAddress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address' id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Switch Primary user address failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/address/primary": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get User' Primary Address (permission = consumer)",
                "operationId": "GetPrimaryAddressByUserID",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.UsersAddress"
                        }
                    },
                    "500": {
                        "description": "Inquiry User Address Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/changepassword": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Change password user (permission = all)",
                "operationId": "ChangePassword",
                "parameters": [
                    {
                        "description": "change password user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Change Password Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Change Password User Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/config": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get User' Configuration (permission = consumer)",
                "operationId": "GetUserConfiguration",
                "responses": {
                    "200": {
                        "description": "{ \"data\": Model }",
                        "schema": {
                            "$ref": "#/definitions/entity.UsersConfig"
                        }
                    },
                    "500": {
                        "description": "Inquiry User Configuration Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/config/:rad": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Update User Radius (permission = superadmin)",
                "operationId": "UpdateUserRadius",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Radius in km",
                        "name": "rad",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\"}",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "Update Users Radius Configuration Failed",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/info": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get user profile (permission = all)",
                "operationId": "GetUser",
                "responses": {
                    "200": {
                        "description": "data:model.ResUserAll",
                        "schema": {
                            "$ref": "#/definitions/model.ResUserAll"
                        }
                    }
                }
            }
        },
        "/user/info/{id}": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get user profile by ID (permission = superadmin)",
                "operationId": "GetUserByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Users",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    }
                }
            }
        },
        "/user/merchant": {
            "get": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Get All User Merchant Admin (permission = superadmin)",
                "operationId": "GetUserMerchant",
                "responses": {
                    "200": {
                        "description": "data: []model.ResUserMerchant",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ResUserMerchant"
                            }
                        }
                    }
                }
            }
        },
        "/user/role/{id}/update": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Update user role (permission = all)",
                "operationId": "UpdateUserRole",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "usersID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "roleID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed Update Role User\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Update user (permission = all)",
                "operationId": "UpdateUser",
                "parameters": [
                    {
                        "description": "update user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReqUserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: entity.Users",
                        "schema": {
                            "$ref": "#/definitions/entity.Users"
                        }
                    },
                    "422": {
                        "description": "code: 422, message: \"Invalid request\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Update User Failed\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/{id}/delete": {
            "delete": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "tags": [
                    "Master User"
                ],
                "summary": "Delete Parking Space by ID (permission = superadmin)",
                "operationId": "DeleteByIDUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: \"Success",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccess"
                        }
                    },
                    "500": {
                        "description": "code: 500, message: \"Failed Delete User\" ",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseErrors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Canvassing": {
            "type": "object",
            "properties": {
                "cooldown": {
                    "type": "integer"
                },
                "expire": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_auto_blast": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "integer"
                },
                "radius": {
                    "type": "number"
                }
            }
        },
        "entity.CanvassingCall": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "foodtruck_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "notif_id": {
                    "type": "integer"
                },
                "queue_no": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.FoodtruckLocation": {
            "type": "object",
            "properties": {
                "foodtruck_id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "entity.HomevisitSales": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "merchantId": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Merchant": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "categoryID": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "igAccount": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "terms": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "xendit_id": {
                    "type": "string"
                }
            }
        },
        "entity.MerchantCategory": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "hexcode": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "entity.MerchantMenu": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isNearby": {
                    "type": "boolean"
                },
                "isVisit": {
                    "type": "boolean"
                },
                "merchantId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "qty": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.MerchantTax": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "merchantId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.MerchantUsersShift": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "merchantUsersId": {
                    "type": "integer"
                },
                "shift": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.ParkingSpace": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "documentsMeta": {
                    "description": "meta data binary file",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endContract": {
                    "type": "string"
                },
                "endTime": {
                    "description": "end operational time",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imagesMeta": {
                    "description": "meta data binary image",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "landlordInfo": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "description": "superadmin",
                    "type": "number"
                },
                "startContract": {
                    "type": "string"
                },
                "startTime": {
                    "description": "start operational time",
                    "type": "string"
                },
                "totalSpace": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.ParkingSpaceSales": {
            "type": "object",
            "properties": {
                "availableSlot": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "endDate": {
                    "description": "date",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "parkingSpaceId": {
                    "description": "foreign key",
                    "type": "integer"
                },
                "point": {
                    "type": "integer"
                },
                "startDate": {
                    "description": "date",
                    "type": "string"
                },
                "totalSlot": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Tasks": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "merchantUsersId": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "types": {
                    "description": "REGULAR, NONREGULAR, HOMEVISIT",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.TasksNonregularLog": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "integer"
                },
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "tasksNonregularId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.TasksRegularLog": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "tasksRegularId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Trx": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qrCode": {
                    "type": "string"
                },
                "status": {
                    "description": "UNPAID;PAID;COMPLETED;FAILED;CANCEL;VOID?",
                    "type": "string"
                },
                "types": {
                    "description": "ORDER; VISIT",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "entity.TrxSync": {
            "type": "object",
            "properties": {
                "businessDate": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "merchantId": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "syncDate": {
                    "type": "string"
                },
                "uniqueId": {
                    "type": "string"
                }
            }
        },
        "entity.TrxVisit": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "grandTotal": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "notes": {
                    "type": "string"
                },
                "paymentMethodId": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "trxId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Users": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "platNo": {
                    "type": "string"
                },
                "profilePicture": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "entity.UsersAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "address_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "person": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entity.UsersConfig": {
            "type": "object",
            "properties": {
                "radius": {
                    "type": "integer"
                }
            }
        },
        "entity.UsersLocation": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.AppSetting": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.Menu": {
            "type": "object",
            "properties": {
                "menu_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "model.Merchant": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "categoryID": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "hexcode": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "igAccount": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "merchantUsersId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "terms": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "xendit_id": {
                    "type": "string"
                }
            }
        },
        "model.MerchantTax": {
            "type": "object",
            "required": [
                "amount",
                "isActive",
                "name",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "model.Pagination": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "model.ReqBatchCreateHomevisitSales": {
            "type": "object",
            "properties": {
                "request": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ReqCreateHomevisitSales"
                    }
                }
            }
        },
        "model.ReqChangePassword": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "model.ReqCreateFoodtruck": {
            "type": "object",
            "required": [
                "userName"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "platNo": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "model.ReqCreateHomeDetailVisitSales": {
            "type": "object",
            "required": [
                "endTime",
                "numberOfFoodtruck",
                "startTime"
            ],
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "numberOfFoodtruck": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "model.ReqCreateHomevisitSales": {
            "type": "object",
            "required": [
                "date",
                "deposit"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "summary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ReqCreateHomeDetailVisitSales"
                    }
                }
            }
        },
        "model.ReqCreateMerchant": {
            "type": "object",
            "required": [
                "address",
                "email",
                "name",
                "phone"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "categoryID": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "igAccount": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "terms": {
                    "type": "string"
                }
            }
        },
        "model.ReqCreateMerchantMenu": {
            "type": "object",
            "required": [
                "name",
                "price",
                "qty"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isNearby": {
                    "type": "boolean"
                },
                "isVisit": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "model.ReqCreateSyncTrx": {
            "type": "object",
            "required": [
                "businessDate",
                "data",
                "syncDate",
                "uniqueId"
            ],
            "properties": {
                "businessDate": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "syncDate": {
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                }
            }
        },
        "model.ReqCreateTasksHomevisit": {
            "type": "object",
            "required": [
                "trxVisitSalesId",
                "usersId"
            ],
            "properties": {
                "trxVisitSalesId": {
                    "type": "integer"
                },
                "usersId": {
                    "description": "foodtruck",
                    "type": "integer"
                }
            }
        },
        "model.ReqCreateTasksTracking": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "tasksId": {
                    "type": "integer"
                }
            }
        },
        "model.ReqCreateTrxSales": {
            "type": "object",
            "required": [
                "merchantId",
                "parkingSpaceSalesId",
                "totalSlot"
            ],
            "properties": {
                "merchantId": {
                    "type": "integer"
                },
                "parkingSpaceSalesId": {
                    "type": "integer"
                },
                "totalSlot": {
                    "type": "integer"
                }
            }
        },
        "model.ReqCreateVisitTrx": {
            "type": "object",
            "required": [
                "address",
                "customerName",
                "grandTotal",
                "latitude",
                "longitude",
                "notes",
                "paymentMethodId",
                "phone",
                "trxId",
                "visitSales"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "grandTotal": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "notes": {
                    "type": "string"
                },
                "paymentMethodId": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "trxId": {
                    "type": "string"
                },
                "visitSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Visit"
                    }
                }
            }
        },
        "model.ReqDeleteAsset": {
            "type": "object",
            "required": [
                "filename"
            ],
            "properties": {
                "filename": {
                    "type": "string"
                }
            }
        },
        "model.ReqRefundHomeVisit": {
            "type": "object",
            "required": [
                "amount",
                "id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "model.ReqRefundParkingSpaceSales": {
            "type": "object",
            "required": [
                "amount",
                "trxParkingSpaceSalesId"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "trxParkingSpaceSalesId": {
                    "type": "integer"
                }
            }
        },
        "model.ReqResetPassword": {
            "type": "object",
            "required": [
                "userName"
            ],
            "properties": {
                "userName": {
                    "type": "string"
                }
            }
        },
        "model.ReqRoleCreate": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.ReqSalesUpdate": {
            "type": "object",
            "properties": {
                "availableSlot": {
                    "type": "integer"
                },
                "parkingSpaceId": {
                    "type": "integer"
                },
                "point": {
                    "type": "integer"
                },
                "totalSlot": {
                    "type": "integer"
                }
            }
        },
        "model.ReqTasksNonRegLog": {
            "type": "object",
            "required": [
                "address",
                "latitude",
                "longitude",
                "tasksId"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "tasksId": {
                    "type": "integer"
                }
            }
        },
        "model.ReqTasksRegLog": {
            "type": "object",
            "required": [
                "latitude",
                "longitude",
                "parkingSpaceName",
                "tasksId",
                "typesId"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "parkingSpaceName": {
                    "type": "string"
                },
                "tasksId": {
                    "type": "integer"
                },
                "typesId": {
                    "type": "integer"
                }
            }
        },
        "model.ReqTasksVisitLog": {
            "type": "object",
            "required": [
                "customerName",
                "latitude",
                "longitude",
                "tasksId",
                "typesId"
            ],
            "properties": {
                "customerName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "tasksId": {
                    "type": "integer"
                },
                "typesId": {
                    "type": "integer"
                }
            }
        },
        "model.ReqTrxOrderOnline": {
            "type": "object",
            "properties": {
                "order": {
                    "$ref": "#/definitions/model.TrxOrder"
                },
                "orderBills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderBill"
                    }
                },
                "paymentSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderPaymentSales"
                    }
                },
                "productSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderProductSales"
                    }
                },
                "taxSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderTaxSales"
                    }
                },
                "trxId": {
                    "type": "string"
                }
            }
        },
        "model.ReqUpdateAppSettingByKey": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "model.ReqUpdateHomeDetailVisitSales": {
            "type": "object",
            "required": [
                "endTime",
                "id",
                "numberOfFoodtruck",
                "startTime"
            ],
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "numberOfFoodtruck": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "model.ReqUpdateHomevisitSales": {
            "type": "object",
            "required": [
                "date",
                "deposit",
                "summary"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "summary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ReqUpdateHomeDetailVisitSales"
                    }
                }
            }
        },
        "model.ReqUpdateMerchant": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "categoryID": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "igAccount": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "terms": {
                    "type": "string"
                },
                "xendit_id": {
                    "type": "string"
                }
            }
        },
        "model.ReqUpdateMerchantMenu": {
            "type": "object",
            "required": [
                "name",
                "price",
                "qty"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isNearby": {
                    "type": "boolean"
                },
                "isVisit": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "model.ReqUserCreate": {
            "type": "object",
            "required": [
                "roleId",
                "userName"
            ],
            "properties": {
                "roleId": {
                    "type": "integer"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "model.ReqUserLogin": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.ReqUserLoginGoogle": {
            "type": "object",
            "required": [
                "idToken"
            ],
            "properties": {
                "idToken": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profilePicture": {
                    "type": "string"
                }
            }
        },
        "model.ReqUserUpdate": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "platNo": {
                    "type": "string"
                }
            }
        },
        "model.ReqXenditGenerateSubAccount": {
            "type": "object",
            "required": [
                "email",
                "id",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.ReqXndQRIS": {
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qr_string": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ReqXndQRISCallback": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "event": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qr_code": {
                    "$ref": "#/definitions/model.ReqXndQRIS"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ResCountFoodtruck": {
            "type": "object",
            "properties": {
                "foodtrucks": {
                    "type": "integer"
                }
            }
        },
        "model.ResCreateQRIS": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "callbackUrl": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID from xendit",
                    "type": "string"
                },
                "qrCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trxId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.ResGetFoodtruckTasks": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "platNo": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tasksId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "model.ResHomeVisitBookingDetailTimeNew": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "menus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResMenu"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ResHomeVisitBookingList": {
            "type": "object",
            "properties": {
                "customerName": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ResHomeVisitDetails": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "numberOfFoodtruck": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "model.ResHomeVisitGetInfo": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "deposit": {
                    "type": "integer"
                },
                "summary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResHomeVisitDetails"
                    }
                }
            }
        },
        "model.ResLiveTracking": {
            "type": "object",
            "properties": {
                "banner": {
                    "type": "string"
                },
                "distance": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "logTime": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "merchantIG": {
                    "type": "string"
                },
                "merchantId": {
                    "type": "integer"
                },
                "merchantName": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tasksId": {
                    "type": "integer"
                },
                "types": {
                    "type": "string"
                }
            }
        },
        "model.ResMenu": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "model.ResMyParkingList": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "profilePicture": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "trxVisitSalesId": {
                    "type": "integer"
                }
            }
        },
        "model.ResMyTasksNonReg": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latParkingSpace": {
                    "type": "number"
                },
                "lonParkingSpace": {
                    "type": "number"
                },
                "status": {
                    "type": "integer"
                },
                "tasksId": {
                    "type": "integer"
                }
            }
        },
        "model.ResMyTasksReg": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "latParkingSpace": {
                    "type": "number"
                },
                "lonParkingSpace": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "scheduleDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tasksId": {
                    "type": "integer"
                },
                "types": {
                    "type": "string"
                },
                "typesId": {
                    "type": "integer"
                }
            }
        },
        "model.ResParkingSpace": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "distance": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isCheckin": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.ResParkingSpaceDetail": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "isCheckin": {
                    "type": "boolean"
                },
                "logo": {
                    "type": "string"
                },
                "merchantIG": {
                    "type": "string"
                },
                "merchantId": {
                    "type": "integer"
                },
                "merchantName": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Schedules"
                    }
                }
            }
        },
        "model.ResPaymentMethod": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "providerName": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "model.ResQRIS": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "qrString": {
                    "type": "string"
                },
                "trxId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ResSimulateQR": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qrCode": {
                    "$ref": "#/definitions/model.ResQRIS"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ResSlotMyParking": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "totalSlot": {
                    "type": "integer"
                }
            }
        },
        "model.ResTasksTracking": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "logTime": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "status": {
                    "type": "integer"
                },
                "tasksId": {
                    "type": "integer"
                }
            }
        },
        "model.ResTrx": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "model.ResTrxList": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "merchantName": {
                    "type": "string"
                },
                "point": {
                    "type": "integer"
                },
                "spaceName": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalSlot": {
                    "type": "integer"
                }
            }
        },
        "model.ResTrxOnlineClosed": {
            "type": "object",
            "properties": {
                "billNo": {
                    "type": "string"
                },
                "businessDate": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "externalID": {
                    "type": "string"
                },
                "grandTotal": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "isClose": {
                    "type": "boolean"
                },
                "merchantUsersId": {
                    "type": "integer"
                },
                "note": {
                    "type": "string"
                },
                "orderNo": {
                    "type": "string"
                },
                "paymentMethod": {
                    "type": "string"
                },
                "paymentMethodId": {
                    "type": "string"
                },
                "paymentMethodName": {
                    "type": "string"
                },
                "totalDiscount": {
                    "type": "number"
                },
                "trxId": {
                    "type": "string"
                },
                "typeOrder": {
                    "type": "string"
                },
                "typePayment": {
                    "type": "string"
                },
                "types": {
                    "description": "0: Offline 1: Online",
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.ResTrxOrderList": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrder"
                    }
                },
                "orderBills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderBill"
                    }
                },
                "paymentSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderPaymentSales"
                    }
                },
                "productSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderProductSales"
                    }
                },
                "taxSales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TrxOrderTaxSales"
                    }
                },
                "trx": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Trx"
                    }
                }
            }
        },
        "model.ResUserAll": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "platNo": {
                    "type": "string"
                },
                "profilePicture": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "roleName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "model.ResUserMerchant": {
            "type": "object",
            "properties": {
                "merchantId": {
                    "type": "integer"
                },
                "merchantName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "model.ResVisitSales": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "categoryColor": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logo": {
                    "type": "string"
                },
                "merchantIG": {
                    "type": "string"
                },
                "merchantName": {
                    "type": "string"
                },
                "terms": {
                    "type": "string"
                }
            }
        },
        "model.ResVisitSalesDetail": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer"
                },
                "endDate": {
                    "description": "timestamp",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "startDate": {
                    "description": "timestamp",
                    "type": "string"
                }
            }
        },
        "model.RespCallsByFoodtruckID": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "foodtruck_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "latitude_foodtruck": {
                    "type": "number"
                },
                "latitude_user": {
                    "type": "number"
                },
                "longitude_foodtruck": {
                    "type": "number"
                },
                "longitude_user": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "notif_id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "queue_no": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.RespCallsByUserID": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "foodtruck_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ig_account": {
                    "type": "string"
                },
                "latitude_foodtruck": {
                    "type": "number"
                },
                "latitude_user": {
                    "type": "number"
                },
                "logo": {
                    "type": "string"
                },
                "longitude_foodtruck": {
                    "type": "number"
                },
                "longitude_user": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "notif_id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "plat_no": {
                    "type": "string"
                },
                "queue_no": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.RespCanvassing": {
            "type": "object",
            "properties": {
                "cooldown": {
                    "type": "integer"
                },
                "expire": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_auto_blast": {
                    "type": "boolean"
                },
                "last_auto_blast": {
                    "type": "string"
                },
                "last_blast": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "integer"
                },
                "radius": {
                    "type": "number"
                }
            }
        },
        "model.RespNotifByUserID": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "foodtruck_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ig_account": {
                    "type": "string"
                },
                "latitude_foodtruck": {
                    "type": "number"
                },
                "latitude_user": {
                    "type": "number"
                },
                "logo": {
                    "type": "string"
                },
                "longitude_foodtruck": {
                    "type": "number"
                },
                "longitude_user": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "plat_no": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ResponseErrors": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/model.errorResponse"
                }
            }
        },
        "model.ResponseSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                }
            }
        },
        "model.Schedules": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "salesId": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "model.Trx": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qrCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trxId": {
                    "type": "string"
                },
                "types": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.TrxOrder": {
            "type": "object",
            "properties": {
                "billNo": {
                    "type": "string"
                },
                "businessDate": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "grandTotal": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "isClose": {
                    "type": "boolean"
                },
                "merchantUsersId": {
                    "type": "integer"
                },
                "note": {
                    "type": "string"
                },
                "orderNo": {
                    "type": "string"
                },
                "paymentMethodId": {
                    "type": "string"
                },
                "paymentMethodName": {
                    "type": "string"
                },
                "totalDiscount": {
                    "type": "number"
                },
                "trxId": {
                    "type": "string"
                },
                "typeOrder": {
                    "type": "string"
                },
                "typePayment": {
                    "type": "string"
                },
                "types": {
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.TrxOrderBill": {
            "type": "object",
            "properties": {
                "billNo": {
                    "type": "string"
                },
                "businessDate": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "grandTotal": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "isClose": {
                    "type": "boolean"
                },
                "orderUniqueId": {
                    "type": "string"
                },
                "subTotal": {
                    "type": "number"
                },
                "totalDiscount": {
                    "type": "number"
                },
                "totalTax": {
                    "type": "number"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                }
            }
        },
        "model.TrxOrderPaymentSales": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "orderBillUniqueId": {
                    "type": "string"
                },
                "orderUniqueId": {
                    "type": "string"
                },
                "paymentMethodId": {
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                }
            }
        },
        "model.TrxOrderProductSales": {
            "type": "object",
            "properties": {
                "businessDate": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "orderBillUniqueId": {
                    "type": "string"
                },
                "orderUniqueId": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "productId": {
                    "type": "integer"
                },
                "qrCode": {
                    "type": "string"
                },
                "qty": {
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                }
            }
        },
        "model.TrxOrderTaxSales": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "merchantTaxId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "orderBillUniqueId": {
                    "type": "string"
                },
                "orderUniqueId": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "uniqueId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                }
            }
        },
        "model.Visit": {
            "type": "object",
            "required": [
                "deposit",
                "menus",
                "salesId"
            ],
            "properties": {
                "deposit": {
                    "type": "integer"
                },
                "menus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Menu"
                    }
                },
                "salesId": {
                    "type": "integer"
                }
            }
        },
        "model.errorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}